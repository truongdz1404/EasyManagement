@page "/students"
@using EasyMN.Shared.Dtos.ClassRoom
@using EasyMN.Shared.Dtos.Student
@inject EasyMN.Shared.IServices.IStudentGrpcService StudentGrpcService
@inject EasyMN.Shared.IServices.IClassGrpcService ClassGrpcService

<h3>Students</h3>

<div class="row mb-3">
    <div class="col">
        <div class="input-group">
            <input type="text" class="form-control" placeholder="Search by name or code..." @bind="searchText" @onkeypress="@HandleSearchKeypress" />
            <button type="button" class="btn btn-primary" @onclick="HandleSearchClick" disabled="@isLoading">
                <i class="bi bi-search"></i> Search
            </button>

            <button type="button" class="btn btn-success ms-2" @onclick="OpenDialogForNew" disabled="@isLoading">
                <i class="bi bi-plus"></i> Add New Student
            </button>
        </div>
    </div>
</div>

@if (isLoading)
{
    <div class="text-center">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
else if (students == null || !students.Any())
{
    <div class="alert alert-info">
        @if (string.IsNullOrEmpty(searchText))
        {
            <p>No students found.</p>
        }
        else
        {
            <p>No students found for search: "@searchText"</p>
        }
    </div>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Code</th>
                <th>Name</th>
                <th>Date of Birth</th>
                <th>Address</th>
                <th>Class</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var student in students)
            {
                <tr>
                    <td>@student.StudentCode</td>
                    <td>@student.Name</td>
                    <td>@student.Dob.ToShortDateString()</td>
                    <td>@student.Address</td>
                    <td>@student.ClassRoomName</td>
                    <td>
                        <button type="button" class="btn btn-primary btn-sm" @onclick="() => OpenDialogForEdit(student)">
                            <i class="bi bi-pencil">Update</i>
                        </button>

                        <button type="button" class="btn btn-danger btn-sm ms-1" @onclick="() => DeleteStudent(student.Id)">
                            <i class="bi bi-trash">Delete</i>
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <div class="d-flex justify-content-between align-items-center">
        <div>
            <span>
                Showing @(((currentPage - 1) * pageSize) + 1) to @Math.Min(currentPage * pageSize, totalItems) of
                @totalItems items
            </span>
        </div>
        <nav aria-label="Page navigation">
            <ul class="pagination">
                <li class="page-item @(currentPage <= 1 ? "disabled" : "")">
                    <button class="page-link" type="button" @onclick="() => GoToPage(currentPage - 1)"
                            disabled="@(currentPage <= 1 || isLoading)">
                        Previous
                    </button>
                </li>
                @for (int i = startPage; i <= endPage; i++)
                {
                    var pageNumber = i;
                    <li class="page-item @(pageNumber == currentPage ? "active" : "")">
                        <button class="page-link" type="button" @onclick="() => GoToPage(pageNumber)"
                                disabled="@isLoading">
                            @pageNumber
                        </button>
                    </li>
                }
                <li class="page-item @(currentPage >= totalPages ? "disabled" : "")">
                    <button class="page-link" type="button" @onclick="() => GoToPage(currentPage + 1)"
                            disabled="@(currentPage >= totalPages || isLoading)">
                        Next
                    </button>
                </li>
            </ul>
        </nav>
    </div>
}

@if (showDialog)
{
    <div class="modal fade show" style="display: block" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@(currentStudent.Id == 0 ? "Add New Student" : "Edit Student")</h5>
                    <button type="button" class="btn-close" @onclick="CloseDialog"></button>
                </div>
                <div class="modal-body">
                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="alert alert-danger">@errorMessage</div>
                    }

                    <div class="mb-3">
                        <label class="form-label">Student Code</label>
                        <input type="text" class="form-control" @bind="currentStudent.StudentCode"
                               disabled="@(currentStudent.Id != 0)" required />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Name</label>
                        <input type="text" class="form-control" @bind="currentStudent.Name" required />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Date of Birth</label>
                        <input type="date" class="form-control" @bind="currentStudent.Dob" @bind:format="yyyy-MM-dd" required />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Address</label>
                        <input type="text" class="form-control" @bind="currentStudent.Address" />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Class</label>
                        <select class="form-select" @bind="SelectedClassRoomId" required>
                            <option value="0">-- Select Class --</option>
                            @foreach (var classroom in classrooms)
                            {
                                <option value="@classroom.Id">@classroom.ClassName</option>
                            }
                        </select>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseDialog" disabled="@isSaving">Cancel</button>
                    <button type="button" class="btn btn-primary" @onclick="SaveStudent" disabled="@(isSaving || !IsFormValid())">
                        @if (isSaving)
                        {
                            <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                        }
                        Save
                    </button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@code {
    private List<StudentDto>? students = new();
    private List<ClassRoomDto> classrooms = new();
    private string searchText = "";
    private bool showDialog = false;
    private bool isLoading = false;
    private bool isSaving = false;
    private string errorMessage = "";
    private StudentDto currentStudent = new();

    // Pagination
    private int pageSize = 5;
    private int currentPage = 1;
    private int totalItems = 0;
    private int totalPages => totalItems > 0 ? (int)Math.Ceiling(totalItems / (double)pageSize) : 1;
    private int startPage => Math.Max(1, currentPage - 2);
    private int endPage => Math.Min(totalPages, startPage + 4);

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await LoadClassrooms();
            await LoadData(1);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error initializing: {ex.Message}");
            errorMessage = $"Failed to initialize: {ex.Message}";
        }
    }
    private int SelectedClassRoomId
    {
        get => currentStudent.ClassRoomId;
        set
        {
            currentStudent.ClassRoomId = value;
            Console.WriteLine($"ClassRoomId set to: {value}"); // Debug
        }
    }
    private async Task LoadData(int page)
    {
        try
        {
            isLoading = true;
            errorMessage = "";
            await InvokeAsync(StateHasChanged); // Force UI update

            currentPage = page;
            var response = await StudentGrpcService.GetAllStudentsAsync(new EasyMN.Shared.Dtos.PagedRequest
                {
                    PageNumber = page,
                    PageSize = pageSize,
                    Keyword = searchText?.Trim() ?? ""
                });

            if (response?.Data != null)
            {
                students = response.Data.Items?.ToList() ?? new List<StudentDto>();
                totalItems = response.Data.TotalItems;
            }
            else
            {
                students = new List<StudentDto>();
                totalItems = 0;
                errorMessage = response?.Message ?? "Failed to load students";
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading data: {ex.Message}");
            students = new List<StudentDto>();
            totalItems = 0;
            errorMessage = $"Error loading data: {ex.Message}";
        }
        finally
        {
            isLoading = false;
            await InvokeAsync(StateHasChanged); // Force UI update
        }
    }

    private async Task LoadClassrooms()
    {
        try
        {
            var response = await ClassGrpcService.GetAllClassRoomsAsync(new());
            if (response?.Data != null)
            {
                classrooms = response.Data.Items?.ToList() ?? new List<ClassRoomDto>();
            }
            else
            {
                classrooms = new List<ClassRoomDto>();
                Console.WriteLine($"Failed to load classrooms: {response?.Message}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading classrooms: {ex.Message}");
            classrooms = new List<ClassRoomDto>();
        }
    }

    private async Task HandleSearchClick()
    {
        if (!isLoading)
        {
            await LoadData(1);
        }
    }

    private async Task HandleSearchKeypress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !isLoading)
        {
            await LoadData(1);
        }
    }

    private async Task GoToPage(int page)
    {
        if (page >= 1 && page <= totalPages && page != currentPage && !isLoading)
        {
            await LoadData(page);
        }
    }

    private void OpenDialogForNew()
    {
        errorMessage = "";
        currentStudent = new StudentDto
        {
            Dob = DateTime.Today,
            ClassRoomId = 0 // Đặt default, user sẽ chọn
        };
        showDialog = true;
        StateHasChanged();
    }

    private void OpenDialogForEdit(StudentDto student)
    {
        errorMessage = "";
        currentStudent = new StudentDto
            {
                Id = student.Id,
                StudentCode = student.StudentCode,
                Name = student.Name,
                Dob = student.Dob,
                Address = student.Address,
                ClassRoomId = student.ClassRoomId
            };
        showDialog = true;
        StateHasChanged();
    }

    private void CloseDialog()
    {
        showDialog = false;
        errorMessage = "";
        currentStudent = new();
        StateHasChanged();
    }

    private bool IsFormValid()
    {
        return !string.IsNullOrWhiteSpace(currentStudent.StudentCode) &&
               !string.IsNullOrWhiteSpace(currentStudent.Name) &&
               currentStudent.ClassRoomId > 0;
    }

    private async Task SaveStudent()
    {
        if (!IsFormValid())
        {
            errorMessage = "Please fill in all required fields";
            return;
        }

        try
        {
            isSaving = true;
            errorMessage = "";
            StateHasChanged();

            if (currentStudent.Id == 0)
            {
                var createRequest = new CreateStudentRequest
                    {
                        StudentCode = currentStudent.StudentCode?.Trim(),
                        Name = currentStudent.Name?.Trim(),
                        Dob = currentStudent.Dob,
                        Address = currentStudent.Address?.Trim(),
                        ClassRoomId = currentStudent.ClassRoomId
                    };
                var response = await StudentGrpcService.AddStudentAsync(createRequest);

                if (response.Data > 0)
                {
                    CloseDialog();
                    await LoadData(currentPage);
                }
                else
                {
                    errorMessage = response.Message ?? "Failed to create student";
                }
            }
            else
            {
                var updateRequest = new UpdateStudentRequest
                    {
                        Id = currentStudent.Id,
                        Name = currentStudent.Name?.Trim(),
                        Dob = currentStudent.Dob,
                        Address = currentStudent.Address?.Trim(),
                        ClassRoomId = currentStudent.ClassRoomId
                    };
                var response = await StudentGrpcService.UpdateStudentAsync(updateRequest);

                if (response.Data)
                {
                    CloseDialog();
                    await LoadData(currentPage);
                }
                else
                {
                    errorMessage = response.Message ?? "Failed to update student";
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving student: {ex.Message}");
            errorMessage = $"Error saving student: {ex.Message}";
        }
        finally
        {
            isSaving = false;
            StateHasChanged();
        }
    }

    private async Task DeleteStudent(int studentId)
    {
        if (isLoading) return;

        try
        {
            var response = await StudentGrpcService.DeleteStudentAsync(new StudentRequest { Id = studentId });
            if (response.Data)
            {
                await LoadData(currentPage);
            }
            else
            {
                errorMessage = response.Message ?? "Failed to delete student";
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting student: {ex.Message}");
            errorMessage = $"Error deleting student: {ex.Message}";
        }
    }
}